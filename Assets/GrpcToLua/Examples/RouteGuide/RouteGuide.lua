local grpctolua = require('grpctolua')

local channel = grpctolua.new_channel('localhost:50052')
local client = grpctolua.new_client(channel, 'routeguide.RouteGuide')

-- Load descriptor set file which is generated by protoc.
local pb_file = UnityEngine.Application.dataPath .. '/GrpcToLua/Examples/RouteGuide/protos/route_guide.pb'
print('load proto file descriptor set from: ' .. pb_file)
grpctolua.load_descriptor_set_from_file(pb_file)

function TestGetFeature()
    print('TestGetFeature')
    coroutine.start(CoGetFeature)
end

function TestListFeatures()
    print('TestListFeatures')
    coroutine.start(CoListFeatures)
end

function TestRecordRoute()
    print('TestRecordRoute')
    coroutine.start(CoRecordRoute)
end

function TestRouteChat()
    print('TestRouteChat')
    coroutine.start(CoRouteChat)
end

function CoGetFeature()
    print('CoGetFeature')
    feature = client:call('GetFeature', GetPoint(409146138, -746188906))
    print('feature: '..DumpTable(feature))
end

function CoListFeatures()
    print('CoListFeatures')
    req = {lo = GetPoint(400000000, -750000000), hi = GetPoint(420000000, -730000000)}
    call = client.call('ListFeature', req)
    print('ListFeature:')
    call.for_each_response(
        function(rsp)
            print(DumpTable(rsp))
        end
    )
end

function CoRecordRoute()
    print('CoRecordRoute')
    call = client.call('RecordRoute')
    features = GetFeatures()
    for _, f in ipairs(features) do
        call.write(f)
        coroutine.wait(0.1)
    end
    call.complete()
    rsp = call.get_response()
    print('RecordRoute resonse: '..Dump(rsp))
end

function CoRouteChat()
    print('CoRouteChat')
    call = client.call('RouteChat')
    coroutine.start(function() CoPrintResponses(call) end)
    notes = GetRouteNotes()
    for _, n in ipairs(notes)
        call.write(n)
        coroutine.wait(0.1)
    end
    call.complete()  -- co_complete?
end

function CoPrintResponse(call)
    call.co_for_each_response(
        function(rsp)
            print('RouteChat response: '..Dump(rsp))
        end
    )
end

function GetPoint(latitude, longitude)
    return {
        latitude = latitude,
        longitude = longitude,
        [123] = 456,
        [{1,2,3}] = "abc",
        ints = {1,2,3},
    }
end

function DumpTable(t)
    local s = '{'
    for pos, val in pairs(t) do
        s = s .. string.format('[%q] => %q, ', pos, val)
    end
    return s .. '}'
end

function GetFeatures()
    return {
        {location = GetPoint(407838351, -746143763), name = "Patriots Path, Mendham, NJ 07945, USA"},
        {location = GetPoint(408122808, -743999179), name = "101 New Jersey 10, Whippany, NJ 07981, USA"},
        {location = GetPoint(413628156, -749015468), name = "U.S. 6, Shohola, PA 18458, USA"}
    }
end

function GetNotes()
    return {
        NewNote("First message", 0, 0),
        NewNote("Second message", 0, 1),
        NewNote("Third message", 1, 0),
        NewNote("Fourth message", 0, 0)
    }
end

function NewNote(message, lat, lon)
    return {
        message = message,
        location = GetPoint(lat, lon)
    }
end